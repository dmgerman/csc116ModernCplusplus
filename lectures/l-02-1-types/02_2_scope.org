#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: Variables and Scope
#+CATEGORY: 
#+PROPERTY: header-args: lang           :varname value
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:C++   :xournal /tmp/rip.cpp          :results output :exports both :flags -std=c++17 -Wall --pedantic -Werror 
#+PROPERTY: header-args:R               :results output :exports both  :colnames yes

** Table of Contents                                                    :TOC:
- [[#declaring-variables-is-just-like-in-c][Declaring variables is just like in C]]
- [[#scope][Scope]]
- [[#scope-can-be-a-pain][Scope can be a pain]]
- [[#what-is-an-environment][What is an environment?]]
- [[#at-run-time][At run time]]
- [[#how-does-the-compiler-find-a-variable][How does the compiler find a variable?]]
  - [[#the-for-loop--creates-its-own-environment][The for loop  creates its own environment]]
  - [[#a-function-invocation-creates-its-own-environment][A function invocation creates its own environment]]
- [[#functional-calls-environments-and-recursion][Functional calls, environments and recursion]]
- [[#conclusion][Conclusion]]

* Declaring variables is just like in C

- it can be done anywhere in the code

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both :xournal /tmp/rip.cpp
#include <iostream>
int main()
{
   int i {};

   std::cout << i << std::endl;

   int j {5};

   std::cout << j << std::endl;

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
0
5
#+end_example

* Scope

The scope of a variable is the *area of the program where that variable exists*.

- at compilation time, and
- at run time


* Scope can be a pain

- But it is based on relatively simple rules
- C++ uses *lexical scope*
  - A variable can only be referenced in the environment where  it is defined

* What is an environment?

- an area of memory associated with a block of code where its variables are placed

- a variable is created in the environment where it is defined 

- the program has a global environment
  - where global variables live

- a block {} defines an environment
  - inside the current environment

* At run time

- a given environment is created when its block starts to execute
- it is destroyed when the execution of the block ends

* How does the compiler find a variable?

- the compiler looks up a variable:
     - in the current environment
     - if not found, in its parent environment
     - if not found, in its parent environment
     - until it reaches the global environment
- if not found, output error (variable not found)

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
int i {-1}; // global environment

int main()
{
   std::cout << "0. " << i << std::endl;

   int i {10}; // "shadows" the global i

   std::cout << "1. " << i << std::endl; 
   
   {  // this block creates a new environment
      std::cout << "2. " << i << std::endl;
      int i {5};
      std::cout << "3. " << i << std::endl;
      i = 0;
   }

   std::cout << "4. " << i << std::endl;

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
0. -1
1. 10
2. 10
3. 5
4. 10
#+end_example

- We cannot define two variables with the same name in the same environment

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
int main()
{
   int i {10};

   {
      int i {5}; // this is ok, we are in a different environment than i above
      std::cout << i << std::endl;
      i = 0;
   }

   double i {0.1}; // this declaration is an error,
                   // already an i in this environment

   return 0;
}

#+END_SRC

#+RESULTS:

#+BEGIN_EXAMPLE
/tmp/babel-9A7CML/C-src-JA1uai.cpp:19:11: error: redefinition of 'i' with a different type: 'double' vs 'int'
   double i {0.1}; // this declaration is an error
          ^
/tmp/babel-9A7CML/C-src-JA1uai.cpp:11:8: note: previous definition is here
   int i {10};
       ^
1 error generated.
#+END_EXAMPLE


** The for loop  creates its own environment 

- for variables declared in between *(* and first *;*

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
int i {-100};

int main()
{
   std::cout << i << std::endl;
   int i {-5};
   std::cout << i << std::endl;

   for(int i {};i<3;i++)
      std::cout << i << std::endl;
   
   std::cout << i << std::endl;

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
-100
-5
0
1
2
-5
#+end_example

** A function invocation creates its own environment

- *Invocation!*
- I repeat: each invocation of a function creates an environment
  - this environment includes
    - its *parameters* and their corresponding values
    - its *local variables*

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
int i=-100;

void my_function(int j)
{
   std::cout << i << std::endl;
}

int main()
{
   std::cout << i << std::endl;
   int i {-5};
   my_function(i);
   {
      int i {0};
   } 

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
-100
-100
#+end_example

* Functional calls, environments and recursion

- see what happens with recursion
- each execution of my_function creates a different environment
  - each execution has its own space for parameters, local variables, and any other environment
  
#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
int i=-100;

void my_function(int i)
{
   std::cout << "Start: " << i << std::endl;
   if (i < 0) {
       i++;
       std::cout << i << std::endl;
       std::cout << "Before: " << i << std::endl;
       my_function(i + 1);
       std::cout << "After: " << i << std::endl;
   }
}

int main()
{
   std::cout << i << std::endl;
   int i {-5};
   my_function(i);

   std::cout << i << std::endl;

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
-100
Start: -5
-4
Before: -4
Start: -3
-2
Before: -2
Start: -1
0
Before: 0
Start: 1
After: 0
After: -2
After: -4
-5
#+end_example

* Conclusion

- It is very important that you understand scope
  - *Where can a variable be used*
  - What is the lifetime of a variable
  - 
